6.List car models (with brand name and model name ) to which at least one car evaluated 
belongs.Each model should appear only once in the result.Sort the list by brand then by 
model name.

select cm_name,make
from carmechanic.m_car_model
join carmechanic.m_car on model_id = cm_id
join carmechanic.m_car_evaluation on c_id = car_id
group by cm_id,cm_name,make
order by make ,cm_name;

7.List the license plate number of cars having a repair with a cost greater than all
repair cost of Toyota cars.Each license plate number should appear only once in the 
result.

select distinct license_plate_number
from carmechanic.m_car
join carmechanic.m_repair on c_id = car_id
where repair_cost > 
(select max(repair_cost)
from carmechanic.m_car
join carmechanic.m_repair on c_id = car_id
join carmechanic.m_car_model on cm_id = model_id
where make = 'Toyota');

8.List the license plate number of cars having a repair cost less than any repair cost 
of a Suzuki car.Each license plate number should appear only once in the result.

select distinct license_plate_number
from carmechanic.m_car
join carmechanic.m_repair
on c_id = car_id
where repair_cost < 
(select min(repair_cost)
from carmechanic.m_car
join carmechanic.m_repair on c_id = car_id
join carmechanic.m_car_model on model_id = cm_id
where make = 'Suzuki');


10.List the name , address and tax number of mechanics who ever had a salary less than
that of all mechanics who ever worked for the workshop name 'Harmat Kft'.Each mechanic
should appear only once in the result.

select m_name,m.address,tax_number
from carmechanic.m_mechanic m
join carmechanic.m_works_for on m_id = mechanic_id
where salary < 
(select  min(salary)
from carmechanic.m_mechanic
join carmechanic.m_works_for on m_id = mechanic_id
join carmechanic.m_workshop on w_id = workshop_id
where w_name = 'Harmat Kft.')
group by m_name,m.address,tax_number;

11.List the name of owner who has never owned an Opel car.

select o_name
from carmechanic.m_owner
minus
select o_name 
from carmechanic.m_owns
join carmechanic.m_owner on o_id = owner_id
where car_id  in (select c_id
from carmechanic.m_car_model
join carmechanic.m_car on model_id = cm_id
where make = 'Opel')




12.List all data of cars that have never been evaluated?

select *
from carmechanic.m_car
where c_id not in (select car_id
from carmechanic.m_car_evaluation);

13.List all data of cars that were first sold in 2006 or Opel make.

select * 
from carmechanic.m_car
left join carmechanic.m_car_model on cm_id = model_id
where extract(year from first_sell_date) = 2006
or make = 'Opel';

14.List the name and identifier of workshop where no mechanics from Eger have 
ever worked.The address of mechanic from Eger starts with 'Eger'.

select w_id,w_name
from carmechanic.m_workshop
where w_id not in (select distinct workshop_id
from carmechanic.m_works_for
join carmechanic.m_mechanic on m_id = mechanic_id
where address like 'Eger%');

15.List all data of cars that have been owned someone living in Eger (i.e. someone whose
address begin with 'Eger') and have been repaired in a workshop in Eger(i.e. in a 
workshop where address starting with 'Eger').Each car should appear only once in the 
result.

select *
from carmechanic.m_car
where c_id in (select car_id
from carmechanic.m_owner
join carmechanic.m_owns on o_id = owner_id
where address like 'Eger%')
and c_id in (select car_id
from carmechanic.m_repair
join carmechanic.m_workshop on w_id = workshop_id
where address like 'Eger%');

21.List the license plate number of cars participating in the evaluations with the 
5 highest evaluation prices.Also give the evaluation price along with license plate 
numbers.Sort the list descending by the evaluation price.

select license_plate_number, price
from carmechanic.m_car
join carmechanic.m_car_evaluation on c_id = car_id
order by price desc
fetch first 5 rows only;

22. List the license plate number of cars participating in the evaluations 
with the 10 lowest evaluation price. Also give the evaluation prices along  with 
the license plate numbers. Sort the list descending by evaluation price.

select * from
(select license_plate_number,price
from carmechanic.m_car
join carmechanic.m_car_evaluation on c_id = car_id
order by  price
fetch first 10 rows only)
order by price desc;


23.List the average evaluation price of cars of each model where this average is 
one of the lowest three. The models should be represented in the result by 
their identifiers.

select cm_id,avg(price)
from carmechanic.m_car_model
left join carmechanic.m_car on model_id = cm_id
left join carmechanic.m_car_evaluation on car_id = c_id
group by cm_id
order by avg(price)
fetch first 3 rows only;


24.List the total repair cost of cars of each model where this total cost is one of the 
lowest five where this total cost is one of the lowest five.The models should be 
represented in the result by their identifiers also by their make and model names.

select cm_id,cm_name,make,sum(repair_cost)
from carmechanic.m_car 
join carmechanic.m_car_model on cm_id = model_id
join carmechanic.m_repair on c_id = car_id
group by cm_id,make,cm_name
order by sum(repair_cost)
fetch first 5 row only;

25.List the mechanics with the two highest salaries who are currently working for 
'Kobela Bt.' (i.e for whom the end of employment is not given). List only the mechanics 
name and salary ,sorted descending by salary.

select m_name,salary
from carmechanic.m_mechanic
join carmechanic.m_works_for on m_id = mechanic_id
join carmechanic.m_workshop on w_id = workshop_id
where w_name = 'Kobela Bt.'
and end_of_employment is null
order by salary desc
fetch first 2 rows only;

31.Create a table named 'relative' where the relatives of mechanics are stored.The table 
should include the following columns (with arbitrary names):identifier(a string of exactly
10 charcters;this is the primary key),name(a string of at most 40 chracters;must not be
unknown),gender(a string at most 10 chracters), date of birth (date) and the mechanic 
connected to this person (an integer of at most 5 digits) with a reference to 'm_mechanic' 
table.Assign a name to each constraint.

CREATE TABLE relative (
  id CHAR(10 CHAR) CONSTRAINT pk_relative PRIMARY KEY,
  name VARCHAR2(40 CHAR) NOT NULL,
  gender VARCHAR2(10 CHAR),
  date_of_birth DATE,
  mechanic NUMBER(5) CONSTRAINT fk_relative  REFERENCES m_mechanic
)

33.Create a table name 'insurance' including the following columns(with arbitrary names):
insurance number (a string exactly 8 chracters;this is the primary key),
a car identifier (an integer of at most 5 digits);
the owner id (an integer of at most 5 digits);
the owner's email address (a string of at most 40 chracters,must not be unknown),
start and end date of insurance (date) and the monthly cost (an integer at most 5 
digits and must be greater than 10000).The table should reference to the 'm_car' and 
'm_owner' table.Assign a name to each constraint.

CREATE TABLE insurance (
  insurance_number CHAR(8 CHAR),
  car_id NUMBER(5),
  owner_id NUMBER(5),
  email VARCHAR2(40 CHAR) NOT NULL,
  start_date DATE,
  end_date DATE,
  monthly_cost NUMBER(5) CONSTRAINT check_cost CHECK(monthly_cost > 10000),
  CONSTRAINT fk_1 FOREIGN KEY(car_id) REFERENCES m_car,
  CONSTRAINT fk_2 FOREIGN KEY(owner_id) REFERENCES m_owner,
  CONSTRAINT pk_insurance PRIMARY KEY(insurance_number)
)

34.Some mechanics took part in a refresher training.Create a table named 'training'
including the following columns(with arbitrary names): identifier (a string of exactly
10 chracters), names (a string of at most 20 chracters), description (a string of at most 
50 chracters), the start and end dates of training(dates),cost (an integer of at most 5 
digits), and the mechanic who took part in this training (an integer of at most 5 digits)
with a reference to 'm_mechanic' table.The primary key consists of the training identifier 
and mechanic identifier . Assign a name to each constraint.




35. The mechanics decided to create a work plan specifying the assignment of mechanics to 
workshops for each workday. Create a table named 'work_plan' including the following 
columns(with arbitrary names) workday(date; with a default value of the ecurrent date),
mechanic(an integer of at most 5 digits) with a reference to the 'm_mechanic' table,
workshop(an integer of at most 5 digits) with a reference to the 'm_workshop' table and
primary key of the table consists of the workday and the mechanic's identifier.
Assign a name to each constraint.

CREATE TABLE work_plan (
    workday DATE DEFAULT SYSDATE,
    mechanic NUMBER(5),
    workshop NUMBER(5),
    CONSTRAINT ref_work_plan FOREIGN KEY (mechanic) REFERENCES m_mechanic,
    CONSTRAINT w_rf_work_plan FOREIGN KEY(workshop) REFERENCES m_workshop,
    CONSTRAINT pk_work_plan PRIMARY KEY (workday, mechanic)
);




71.Create a view that shows the license plate number of the gray car(s) with 
the highest first_sell price.

select license_plate_number
from carmechanic.m_car
where color = 'gray'
and first_sell_price = (select max(first_sell_price)
from carmechanic.m_car
where color = 'gray');

72.Create a view that lists the name of car brands and model with no cars.

select cm_name , make
from carmechanic.m_car_model
left join carmechanic.m_car on cm_id = model_id
group by cm_id,make,cm_name
having count(c_id) = 0;

73.Create a view that lists the name and address of workshops in Debrecen, 
 with the  name and address of the workshop's manager if this manager does not
  live in Debrecen. Addresses in Debrecen start with 'Debrecen'.

  select * from
(select w_name,w.address w,m_name,m.address
from carmechanic.m_workshop w
join carmechanic.m_mechanic m on m_id = manager_id
where m.address like 'Debrecen%')
where w like 'Debrecen%';

74.Create a view that lists the name of workshop managers ,the name of workshop they 
manage and the name of workshop they ever worked for if these workshops are different 
from the workshop they manage.

select m_name,w_name
from carmechanic.m_workshop
left join carmechanic.m_mechanic on m_id = manager_id
union 
select m_name,w_name
from carmechanic.m_workshop
 join carmechanic.m_works_for on w_id = workshop_id
 join carmechanic.m_mechanic on m_id = mechanic_id
where m_id in (select manager_id from carmechanic.m_workshop)
order by 1

75.Create a view that shows the name of the workshop where the longest 
(finished) repair took place,together with the duration of this repair in days.

select w_name,end_date - start_date
from carmechanic.m_repair
join carmechanic.m_workshop on w_id = workshop_id
where end_date - start_date = (select max(end_date - start_date)
from carmechanic.m_repair);


81.Create a view that lists the license plate number of all cars together with the 
name of their latest owners.If a car has no owner the string 'no owner' should appear 
 next to thier license plate number.

select a2,nvl(o_name,'no name') from
(select license_plate_number a1,o_name,date_of_buy b1
from carmechanic.m_car
left join carmechanic.m_owns on c_id = car_id
left join carmechanic.m_owner on o_id = owner_id
order by 1)
 right join 
(select license_plate_number a2,max(date_of_buy) b2
from carmechanic.m_car
left join carmechanic.m_owns on c_id = car_id
left join carmechanic.m_owner on o_id = owner_id
group by license_plate_number)
on a1 = a2 and b1 = b2;


82.Create a view that,for each color, list the license plate number and first sell 
price of the car(s) with that color having the highest first sell price.

select a1,c1,b1 from
(select color a2 ,max(first_sell_price) b2
from carmechanic.m_car
group by color )
join
(select color a1,license_plate_number c1,first_sell_price b1
from carmechanic.m_car)
on a1 = a2 and b1=b2;

83.Create a view that lists the name of car makes and models with most cars in our
database.

select * from 
(select max(cnt) a1 from
(select cm_id,cm_name,make,count(*) cnt
from carmechanic.m_car_model
join carmechanic.m_car on model_id = cm_id
group by cm_id,cm_name,make))
join
(select cm_name,make,count(*) a2
from carmechanic.m_car_model
join carmechanic.m_car on model_id = cm_id
group by cm_id,cm_name,make)
on a1 = a2

84.Create a view that shows the year(s) for which the most evaluations of cars 
with this first-sell year took place.

select b1,b2 from
(select max(cnt) a2 from
(select extract(year from first_sell_date) ,count(*) cnt
from carmechanic.m_car
join carmechanic.m_car_evaluation on c_id = car_id
group by extract(year from first_sell_date)))
join
(select extract(year from first_sell_date) b1,count(*) b2
from carmechanic.m_car
join carmechanic.m_car_evaluation on c_id = car_id
group by extract(year from first_sell_date))
on b2 = a2

85.Create a view for each workshops shows the car model(s) involved in the most 
repair in that workshop Both the workshops and the car models should be represented 
by identifiers in the view .

select a1,model_id,b2 from 
(select workshop_id a1,max(cnt) b1
from (select workshop_id,model_id,count(*) cnt
from carmechanic.m_car
join carmechanic.m_repair on c_id = car_id
group by workshop_id,model_id)
group by workshop_id)
join
 (select workshop_id a2,model_id,count(*) b2
from carmechanic.m_car
join carmechanic.m_repair on c_id = car_id
group by workshop_id,model_id)
on a1 = a2 and b1 = b2;

91.Grant select privilege to the user named 'dzsoni' on your 'm_mechanic' table.

GRANT SELECT ON m_mechanic TO dzsoni;

92.Grant INSERT and UPDATE privileges to the user names 'dszoni' on your 'm_owner' table.

GRANT INSERT, UPDATE ON m_owner TO dszoni;




93.Grant all privileges to all users on your 'm_car' table.

GRANT ALL PRIVILEGES ON m_car TO PUBLIC;

94.Revoke the SELECT priviledge from the user named 'dzsoni' on your 'm_mechanic' table.

REVOKE SELECT ON m_mechanic FROM dzsoni;

95.Revoke all privileges from all users on your 'm_car' table.

REVOKE ALL PRIVILEGES ON m_car FROM PUBLIC;
